{"version":3,"sources":["dist/zxdom.js"],"names":["global","factory","exports","module","define","amd","zxdom","this","setAttr","el","name","oldval","val","substr","removeAttribute","setAttribute","updateAttr","oldAttr","newAttr","Object","keys","forEach","make","vnode","svg","component","inst","instances","push","tag","attr","chld","oncreate","document","createElementNS","createElement","c","appendChild","text","createTextNode","insert","parent","index","insertBefore","childNodes","replace","oldnode","newel","parentNode","callOnRemove","replaceChild","onremove","chnode","i","getIndexOfVNode","vnodes","keyOrTag","start","length","node","key","getKeyOrTagOfVNode","setComponentInstance","newnode","indexOf","splice","patch","parentEl","oldChildren","newChildren","n","chels","o","removeChild","updateChildren","onupdate","h","type","concat","func","assign","state","initial","update","mount","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.zxdom = {})));\n}(this, (function (exports) { 'use strict';\n\n    function setAttr(el, name, oldval, val) {\n        if (name === 'key' || name === 'value' || name === 'selected' || name === 'checked' || name.substr(0,2) === 'on') {\n            el[name] = val;\n        } else if (val == null) {\n            el.removeAttribute(name);\n        } else if (oldval !== val) {\n            el.setAttribute(name, val);\n        }\n    }\n    //need a test: seems not to matter what we pass as third arg in first loop below\n    //also need a test for checked\n    function updateAttr (el, oldAttr, newAttr) {\n        Object.keys(oldAttr).forEach(name => {\n            if (newAttr[name] == null) setAttr(el, name, el);\n        });\n        Object.keys(newAttr).forEach(name => {\n            setAttr(el, name, oldAttr[name], newAttr[name]);\n        });\n        return el\n    }\n\n    function makeHTMLElement ({tag, attr, chld}, svg = false) {\n        const oncreate = attr.oncreate;\n        svg = svg || (tag === 'svg');\n        const el = svg ? document.createElementNS('http://www.w3.org/2000/svg', tag) : document.createElement(tag);\n        updateAttr(el, {}, attr);\n        chld.forEach(c => el.appendChild(make(c, svg)));\n        if (oncreate) {\n            oncreate(el);\n        }\n        return el\n    }\n\n    function makeTextNode (text) {\n        return document.createTextNode(text)\n    }\n\n    function makeComponentInstance (inst)Â {\n        inst.el = make(inst.vnode);\n        inst.component.instances.push(inst);\n        return inst.el\n    }\n\n    function make (vnode, svg) {\n        return (\n            vnode.component ? makeComponentInstance\n            : vnode.tag ? makeHTMLElement\n            : makeTextNode\n        )(vnode, svg)\n    }\n\n    //TODO: Look into maybe not letting h pass along components, but building up just a plain vnode tree. Should simplify diffing algo\n\n    function insert(parent, el, index) {\n        parent.insertBefore(el, parent.childNodes[index]);\n    }\n\n    function replace(el, vnode, oldnode) {\n        const newel = make(vnode);\n        const parent = el.parentNode;\n        if (parent) {\n            callOnRemove(el, oldnode);\n            parent.replaceChild(newel, el);\n        }\n        return newel\n    }\n\n    function callOnRemove(el, oldnode) {\n        oldnode = oldnode.vnode || oldnode;\n        let {attr, chld} = oldnode;\n        if (attr && attr.onremove) attr.onremove(el);\n        if (chld) chld.forEach((chnode, i) => callOnRemove(el.childNodes[i], chnode));\n    } \n\n    function getIndexOfVNode(vnodes, keyOrTag, start = 0) {\n        for (let i = start; i < vnodes.length; i++) {\n            let node = vnodes[i];\n            if (node.attr && node.attr.key) {\n                if (node.attr.key === keyOrTag) return i\n                continue\n            } else if (node.tag === keyOrTag) {\n                return i\n            }\n        }\n    }\n\n    function getKeyOrTagOfVNode(vnode) {\n        vnode = vnode.vnode || vnode;\n        if (vnode.attr && vnode.attr.key) return vnode.attr.key\n        return vnode.tag\n    }\n\n    function updateChildren(parentEl, oldChildren = [], newChildren = []) {\n        let n = 0;\n        const chels = parentEl.childNodes;\n        while (n < oldChildren.length && n < newChildren.length) {\n            let o = getIndexOfVNode(oldChildren, getKeyOrTagOfVNode(newChildren[n]), n);\n            if (o == null) { \n                insert(parentEl, make(newChildren[n]), n);\n                oldChildren.splice(n, 0, null);\n            } else {\n                if (o != n) {\n                    insert(parentEl, chels[o], n);\n                    oldChildren.splice(n, 0, oldChildren.splice(o, 1)[0]);\n                }\n                patch(chels[n], oldChildren[n], newChildren[n]);\n            }\n            n++;\n        }\n        while (n < oldChildren.length) {\n            callOnRemove(chels[n], oldChildren[n]);\n            parentEl.removeChild(chels[n]);\n            oldChildren.splice(n, 1);\n        }\n        while (n < newChildren.length) {\n            insert(parentEl, make(newChildren[n++]), n);\n        }\n    }\n\n    function setComponentInstance(oldnode, newnode) {\n        const instances = oldnode.component.instances;\n        const index = instances.indexOf(oldnode);\n        if (newnode) instances.splice(index, 1, newnode);\n        else instances.splice(index, 1);\n    }\n\n    function patch (el, oldnode, newnode) {\n        if (oldnode.component) {\n            if ( oldnode.component === newnode.component ) {\n                setComponentInstance(oldnode, newnode);\n                el = patch(el, oldnode.vnode, newnode.vnode);\n                newnode.el = el;\n            } else {\n                setComponentInstance(oldnode); //remove the old component instance\n                el = replace(el, newnode.vnode || newnode, oldnode.vnode);\n            }\n        } else if (oldnode.tag) {\n            if (getKeyOrTagOfVNode(oldnode) === getKeyOrTagOfVNode(newnode)) {\n                updateAttr(el, oldnode.attr, newnode.attr);\n                updateChildren(el, oldnode.chld, newnode.chld);\n                if (newnode.attr && newnode.attr.onupdate) {\n                    newnode.attr.onupdate(el);\n                }\n            } else {\n                el = replace(el, newnode, oldnode);\n            }\n        } else if (oldnode !== newnode) {\n            el = replace(el, newnode, oldnode);\n        }\n        return el\n    }\n\n    function h(type, attr, ...chld)Â {\n        attr = attr || {};\n        chld = [].concat(...[].concat(...chld)); //flatten children into a single array\n        if (!!type.func) return {\n            component: type,\n            vnode: type.func(Object.assign({}, attr, type.state), chld),\n            attr,\n            chld,\n        }\n        if (typeof type === 'function') return type(attr, chld)\n        return {tag: type, attr, chld}\n    }\n\n    function define (func, initial = {}) {\n        return {\n            func,\n            state: initial,\n            instances: []\n        }\n    }\n\n    function update (component, state={}) {\n        component.state = state;\n        component.instances.forEach(inst => {\n            patch(inst.el, inst, h(component, Object.assign({}, inst.attr), inst.chld));\n        });    \n    }\n\n    function mount (vnode, parent) {\n        if (vnode.func) vnode = h(vnode);\n        parent.appendChild(make(vnode));\n    }\n\n    exports.patch = patch;\n    exports.make = make;\n    exports.h = h;\n    exports.define = define;\n    exports.update = update;\n    exports.mount = mount;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=zxdom.js.map\n"]}